services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 10s
    networks:
      - app-network

  orders-service:
    build:
      context: ./orders-service/ecommerce
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_USERNAME=admin
      - SPRING_RABBITMQ_PASSWORD=admin
      - SPRING_RABBITMQ_PORT=5672
    depends_on:
      - rabbitmq
    ports:
      - "8080:8080"
    networks:
      - app-network

  order-consumer:
    build:
      context: ./orders-consumer
    environment:
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - STOCK_API_URL=http://stock-api:3001
    depends_on:
      rabbitmq:
        condition: service_healthy
      stock-api:
        condition: service_started
    volumes:
      - ./orders-consumer/invoices:/app/data/invoices
    networks:
      - app-network

  stock-api:
      build:
        context: ./stock-api
      container_name: ecommerce-stock-api
      ports:
        - "3001:3001"
      volumes:
        - ./stock-api/db.json:/app/db.json
      networks:
        - app-network

  notify-service:
    build:
      context: ./notify-service
    environment:
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
    volumes:
      - ./orders-consumer/invoices:/app/data/invoices
    depends_on:
      - rabbitmq
    networks:
      - app-network

  frontend:
      build:
        context: ./frontend
        dockerfile: Dockerfile
      container_name: ecommerce-frontend
      ports:
        - "80:80"
      depends_on:
        - orders-service
        - stock-api
      networks:
        - app-network
volumes:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge
